version: "3.4"

name: posts-docker-compose

networks:
  postsBackendNetwork:
  postsFrontendNetwork:
  elasticsearch:
    driver: bridge

services:
  #DATABASE
  postsdb:
    container_name: posts-db
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 1433:1433
    networks:
      - postsBackendNetwork
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=@Marko123

  #WEB API
  aspnetserver:
    container_name: posts-server
    image: ${DOCKER_REGISTRY-}aspnetserver:latest
    build:
      context: .
      dockerfile: aspnetserver/Dockerfile
    ports:
      - 7171:80
    depends_on:
      - postsdb
    networks:
      - postsBackendNetwork
      - postsFrontendNetwork
      - elasticsearch
    environment:
      - DB_HOST=postsdb
      - DB_NAME=PostsDB
      - DB_USER_ID=sa
      - MSSQL_SA_PASSWORD=@Marko123
      - ASPNETCORE_ENVIRONMENT=Development
      - IS_IN_DOCKER=true

  #CLIENT
  reactclient:
    container_name: posts-client
    image: ${DOCKER_REGISTRY-}reactclient:latest
    build:
      context: .
      dockerfile: reactclient/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - aspnetserver
    volumes:
      - ./src:/app/src
    networks:
      - postsFrontendNetwork

  #ELASTIC
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    expose:
      - 9200
    ports:
      - "9200:9200"
    environment:
      xpack.security.enabled: false
      cluster.name: "posts-cluster"
      discovery.type: "single-node"
    networks:
      - elasticsearch

  #KIBANA
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.6.0
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: "http://localhost:9200"
      xpack.security.enabled: "false"
      xpack.monitoring.enabled: "true"
      xpack.watcher.enabled: "true"
      xpack.ml.enabled: "true"
    ports:
      - "5601:5601"
    networks:
      - elasticsearch
